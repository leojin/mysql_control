#!/usr/bin/env bash

#set -x

readonly PATH_ROOT=$(cd `dirname $0`/..; pwd)

eval `cat $PATH_ROOT/etc/params.env`

arg_baseDir=$DEFAULT_BASEDIR
arg_password=$DEFAULT_PASSWORD
arg_methods=()

function help(){
    local scriptname="`dirname $0`/`basename $0`"
    cat << EOF
Usage $scriptname [options] [args] method <param1> <param2> ..

----------     OPTIONS     ----------

-b <ARG>    : set location of mysql
              e.g. /home/work/local/mysql
              default $DEFAULT_BASEDIR
-p <ARG>    : set root password
-h          : display this usage

----------     METHODS     ----------

EOF

    for method in ${arg_methods[@]};
    do
        pluginHelp_"$method"
        echo ""
    done

}

function log(){

    if [[ $# -lt 2 ]]; then
        echo "$@"
        return
    fi

    local paramLevel=$1
    shift
    local paramMsg="$@"

    case $paramLevel in
        ERROR )
            echo -e "${COLOR_RED}ERROR${COLOR_RES} : $paramMsg"
            ;;
        INFO )
            echo -e "${COLOR_GREEN}INFO${COLOR_RES} : $paramMsg"
            ;;
        WARN )
            echo -e "${COLOR_YELOW}WARN${COLOR_RES} : $paramMsg"
            ;;
        *)
            echo "$paramMsg"
    esac

}

function main(){

    for file in `ls $PATH_ROOT/plugin`; do
        source $PATH_ROOT/plugin/$file
    done

    while getopts "b:p:h" opt; do
        case $opt in
            h )
                help
                return 0
                ;;
            b )
                arg_baseDir=$OPTARG
                if [[ ! -d $arg_baseDir ]]; then
                    log ERROR "${arg_baseDir} not exist"
                    return 1
                fi
                if [[ ! -f $arg_baseDir/bin/mysqld_safe ]]; then
                    log ERROR "${arg_baseDir}/bin/mysqld_safe not exist"
                    return 1
                fi
                if [[ ! -f $arg_baseDir/bin/mysql_install_db ]]; then
                    log ERROR "${arg_baseDir}/bin/mysql_install_db not exist"
                    return 1
                fi
                ;;
            p )
                arg_password=$OPTARG
                ;;
            * )
                ;;
        esac
    done

    shift $(( $OPTIND-1 ))

    if [[ $# -eq 0 ]]; then
        help
        return 1
    fi

    cur_method=$1

    for method in ${arg_methods[@]};
    do
        if [[ "$method" == "$cur_method" ]]; then
            plugin_"$@"
            return $?
        fi
    done

    help
    return 1
}

main "$@"

exit $?
