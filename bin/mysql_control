#!/usr/bin/env bash

#set -x

readonly PATH_ROOT=$(cd `dirname $0`/..; pwd)

readonly DEFAULT_BASEDIR="/usr"
readonly DEFAULT_PORT="3306"
readonly DEFAULT_PASSWORD=""

arg_baseDir=$DEFAULT_BASEDIR
arg_password=$DEFAULT_PASSWORD

function help(){
    local scriptname="`dirname $0`/`basename $0`"
    cat << EOF
Usage $scriptname [options] [args] method <param1> <param2> ..

-- OPTIONS --

-b <ARG>    : set location of mysql
              e.g. /home/work/local/mysql
              default $DEFAULT_BASEDIR
-p <ARG>    : set root password
-h          : display this usage

-- METHODS --

init
    <port:default $DEFAULT_PORT>

start

stop

setPass
    <new_password>

addDbUser
    <db_name>
    <user_name>
    <user_password>

EOF
}

function init(){

    if [[ $# -gt 0 ]]; then
        local paramPort=$1
    else
        local paramPort=$DEFAULT_PORT
    fi

    if ! [[ "$paramPort" =~ ^[0-9]+$ ]]; then
        echo "ERROR: $paramPort is not an integer"
        return 1
    fi

    if [[ ! -d $PATH_ROOT/data ]]; then
        mkdir $PATH_ROOT/data
    fi

    if [[ ! -d $PATH_ROOT/var ]]; then
        mkdir $PATH_ROOT/var
    fi

    if [[ ! -d $PATH_ROOT/log ]]; then
        mkdir $PATH_ROOT/log
    fi

    cp $PATH_ROOT/etc/mysql.config.tpl $PATH_ROOT/etc/mysql.config

    baseDirReg=$(echo ${arg_baseDir} |sed -e 's/\//\\\//g')
    pathRootReg=$(echo ${PATH_ROOT} |sed -e 's/\//\\\//g')

    sed -i "s/{PORT}/$paramPort/g" $PATH_ROOT/etc/mysql.config
    sed -i "s/{ROOT_PATH}/$pathRootReg/g" $PATH_ROOT/etc/mysql.config
    sed -i "s/{BASE_PATH}/$baseDirReg/g" $PATH_ROOT/etc/mysql.config

    $arg_baseDir/bin/mysql_install_db \
        --defaults-file=$PATH_ROOT/etc/mysql.config \
        --basedir=$arg_baseDir

    if [[ 0 -ne $? ]]; then
        echo "ERROR: mysql_install_db fail"
        return 1
    fi

    return 0

}

function start(){

    if [[ -f $PATH_ROOT/var/mysqld.pid ]]; then
        echo "ERROR: mysql(`cat $PATH_ROOT/var/mysqld.pid`) is running"
        return 1
    fi

    nohup $arg_baseDir/bin/mysqld_safe \
        --defaults-file=$PATH_ROOT/etc/mysql.config >$PATH_ROOT/log/nohup.log 2>$PATH_ROOT/log/nohup.err &

    sleep 1

    if [[ ! -f $PATH_ROOT/var/mysqld.pid ]]; then
        echo "ERROR: mysql start fail"
        return 1
    fi

    echo "INFO: mysql start success"

    return 0

}

function stop(){

    if [[ ! -f $PATH_ROOT/var/mysqld.pid ]]; then
        echo "ERROR: mysql is not running"
        return 1
    fi

    if [[ "" == $arg_password ]]; then
        local argExt=""
    else
        local argExt="-p$arg_password"
    fi

    $arg_baseDir/bin/mysqladmin \
        -S $PATH_ROOT/var/mysqld.sock \
        -uroot \
        $argExt \
        shutdown

    if [[ 0 -ne $? ]]; then
        echo "ERROR: mysql stop fail"
        return 1
    fi

    if [[  -f $PATH_ROOT/var/mysqld.pid ]]; then
        echo "ERROR: mysql is still running"
        return 1
    fi

    echo "INFO: mysql stop success"

    return 0

}

function setPass(){

    if [[ $# -lt 1 ]]; then
        echo "ERROR: param password missing"
    fi

    local paramPassword=$1

    if [[ "" == $arg_password ]]; then
        local argExt=""
    else
        local argExt="-p$arg_password"
    fi

    $arg_baseDir/bin/mysql \
        -S $PATH_ROOT/var/mysqld.sock \
        -uroot \
        $argExt \
        -e 'DELETE FROM mysql.user WHERE user="";FLUSH PRIVILEGES;'

    if [[ 0 -ne $? ]]; then
        echo "ERROR: clear empty user fail"
        return 1
    fi

    $arg_baseDir/bin/mysqladmin \
        -S $PATH_ROOT/var/mysqld.sock \
        -uroot \
        $argExt \
        password $paramPassword

    if [[ 0 -ne $? ]]; then
        echo "ERROR: change root password fail"
        return 1
    fi

    echo "INFO: change root password success"

    return 0

}

function addDbUser(){

    if [[ $# -lt 4 ]]; then
        echo "ERROR: addDbUser <db_name> <user_name> <user_pass> <user_host>"
        return 1
    fi

    local paramDbName=$1
    local paramUserName=$2
    local paramUserPass=$3
    local paramUserHost=$4

    if [[ "" == "$paramDbName" \
        || "" == "$paramUserName" \
        || "" == "$paramUserPass" \
        || "" == "$paramUserHost" ]]; then
        echo "ERROR: addDbUser param empty"
        return 1
    fi

    if [[ "" == $arg_password ]]; then
        local argExt=""
    else
        local argExt="-p$arg_password"
    fi

    local dbList=`$arg_baseDir/bin/mysql \
        -S $PATH_ROOT/var/mysqld.sock \
        -N -s \
        -uroot \
        $argExt \
        -e "SHOW DATABASES LIKE \"${paramDbName}\"" 2>/dev/null`

    if [[ 0 -ne $? ]]; then
        echo "ERROR: get db list fail"
        return 1
    fi

    if [[ ! "$paramDbName" == "$dbList" ]]; then
        $arg_baseDir/bin/mysql \
            -S $PATH_ROOT/var/mysqld.sock \
            -uroot \
            $argExt \
            -e "CREATE DATABASE \`${paramDbName}\`;"

        if [[ 0 -ne $? ]]; then
            echo "ERROR: create database ${paramDbName} fail"
            return 1
        fi
        echo "INFO: create database ${paramDbName} success"
    fi

    $arg_baseDir/bin/mysql \
        -S $PATH_ROOT/var/mysqld.sock \
        -uroot \
        $argExt \
        -e "INSERT INTO \
                mysql.user (\`Host\`, \`User\`, \`Password\`) \
            VALUES \
                (\"${paramUserHost}\", \"${paramUserName}\", PASSWORD(\"${paramUserPass}\"));FLUSH PRIVILEGES;"

    if [[ 0 -ne $? ]]; then
        echo "ERROR: add user ${paramUserName}:${paramUserPass}@${paramUserHost} fail"
        return 1
    fi

    echo "INFO: add user ${paramUserName}:${paramUserPass}@${paramUserHost} success"

    $arg_baseDir/bin/mysql \
        -S $PATH_ROOT/var/mysqld.sock \
        -uroot \
        $argExt \
        -e "GRANT ALL PRIVILEGES ON \
                \`${paramDbName}\`.* \
            TO \
                ${paramUserName}@${paramUserHost} \
            IDENTIFIED BY \
                \"${paramUserPass}\";FLUSH PRIVILEGES;"

    if [[ 0 -ne $? ]]; then
        echo "ERROR: grant privileges ${paramUserName}:${paramUserPass}@${paramUserHost} on ${paramDbName} fail"
        return 1
    fi

    echo "INFO: add user ${paramUserName}:${paramUserPass}@${paramUserHost} on ${paramDbName} success"

    return 0

}

function main(){

    while getopts "b:p:h" opt; do
        case $opt in
            h )
                help
                return 0
                ;;
            b )
                arg_baseDir=$OPTARG
                if [[ ! -d $arg_baseDir ]]; then
                    echo "ERROR: ${arg_baseDir} not exist"
                    return 1
                fi
                if [[ ! -f $arg_baseDir/bin/mysqld_safe ]]; then
                    echo "ERROR: ${arg_baseDir}/bin/mysqld_safe not exist"
                    return 1
                fi
                if [[ ! -f $arg_baseDir/bin/mysql_install_db ]]; then
                    echo "ERROR: ${arg_baseDir}/bin/mysql_install_db not exist"
                    return 1
                fi
                ;;
            p )
                arg_password=$OPTARG
                ;;
            * )
                ;;
        esac
    done

    shift $(( $OPTIND-1 ))

    if [[ $# -eq 0 ]]; then
        help
        return 1
    fi

    arg_method=$1

    if [[ "init"        == "$arg_method" \
        || "start"      == "$arg_method" \
        || "stop"       == "$arg_method" \
        || "setPass"    == "$arg_method" \
        || "addDbUser"  == "$arg_method" ]]; then
        "$@"
        return $?
    else
        help
        return 1
    fi

}

main "$@"

exit $?
